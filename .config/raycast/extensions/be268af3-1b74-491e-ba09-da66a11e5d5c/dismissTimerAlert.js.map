{
  "version": 3,
  "sources": ["../src/dismissTimerAlert.ts", "../src/backend/timerBackend.ts", "../src/backend/formatUtils.ts", "../src/backend/utils.ts"],
  "sourcesContent": ["import { closeMainWindow, getPreferenceValues, showToast, Toast } from \"@raycast/api\";\nimport { getTimers, stopTimer } from \"./backend/timerBackend\";\nimport { Timer } from \"./backend/types\";\n\nexport default async () => {\n  if (!getPreferenceValues().ringContinuously) {\n    return await showToast({\n      style: Toast.Style.Failure,\n      title: \"Ring Continuously setting not enabled!\",\n    });\n  }\n  const finishedTimers = getTimers().filter((t: Timer) => t.timeLeft === 0);\n  if (finishedTimers.length === 0) {\n    return await showToast({\n      style: Toast.Style.Failure,\n      title: \"No finished timers found!\",\n    });\n  }\n  await closeMainWindow();\n  stopTimer(finishedTimers[0].originalFile);\n};\n", "import { environment, getPreferenceValues } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, unlinkSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, Timer, TimerLaunchConfig } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\nimport { showHudOrToast } from \"./utils\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\nconst DEFAULT_PRESET_VISIBLES_FILE = environment.supportPath + \"/defaultPresetVisibles.json\";\n\nconst silentFileDeletion = (fp: string) => {\n  try {\n    unlinkSync(fp);\n  } catch (err) {\n    // only throw if it's not a \"file doesn't exist\" error\n    if (err instanceof Error && !err.message.includes(\"ENOENT\")) throw err;\n  }\n};\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    showHudOrToast({ msg: errorMsg, launchedFromMenuBar: launchedFromMenuBar, isErr: true });\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer({\n  timeInSeconds,\n  timerName = \"Untitled\",\n  launchedFromMenuBar = false,\n  selectedSound = \"default\",\n}: TimerLaunchConfig) {\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n  writeFileSync(masterName, timerName);\n\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`,\n  );\n  const afplayString = `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  if (prefs.selectedSound === \"speak_timer_name\") {\n    cmdParts.push(`say \"${timerName}\"`);\n  } else {\n    cmdParts.push(afplayString);\n  }\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${afplayString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  exec(cmdParts.join(\" && \"), (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n  showHudOrToast({\n    msg: `Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}!`,\n    launchedFromMenuBar: launchedFromMenuBar,\n    isErr: false,\n  });\n}\n\nfunction stopTimer(timerFile: string) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  const dismissFile = timerFilePath.replace(\".timer\", \".dismiss\");\n  silentFileDeletion(timerFilePath);\n  silentFileDeletion(dismissFile);\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n      };\n      timer.name = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeLeft = Math.max(0, Math.round(timer.secondsSet - secondsBetweenDates({ d2: timeStarted })));\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet);\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const dataPath = environment.supportPath + \"/\" + timerFile;\n  writeFileSync(dataPath, newName);\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  const res: Record<string, CustomTimer> = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  return Object.fromEntries(\n    Object.entries(res).map(([ctID, timer]) =>\n      timer.showInMenuBar === undefined ? [ctID, { ...timer, showInMenuBar: true }] : [ctID, timer],\n    ),\n  );\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction toggleCustomTimerMenubarVisibility(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  const currentVisibility = customTimers[ctID].showInMenuBar;\n  customTimers[ctID].showInMenuBar = currentVisibility === undefined ? false : !currentVisibility;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nconst readDefaultPresetVisibles = (): Record<string, boolean> => {\n  if (!existsSync(DEFAULT_PRESET_VISIBLES_FILE)) {\n    const defaultPresetVisibles = {\n      \"2M\": true,\n      \"5M\": true,\n      \"10M\": true,\n      \"15M\": true,\n      \"30M\": true,\n      \"45M\": true,\n      \"60M\": true,\n      \"90M\": true,\n    };\n    writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(defaultPresetVisibles));\n    return defaultPresetVisibles;\n  }\n  const res: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  return res;\n};\n\nconst toggleDefaultPresetVisibility = (key: string) => {\n  const data: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  data[key] = !data[key];\n  writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(data));\n};\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  toggleCustomTimerMenubarVisibility,\n  startTimer,\n  stopTimer,\n  readDefaultPresetVisibles,\n  toggleDefaultPresetVisibility,\n};\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours === 0 ? \"\" : hours + \":\"}${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    parsedDate.getMonth().toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\"),\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime(),\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n", "import { Toast, getPreferenceValues, popToRoot, showHUD, showToast } from \"@raycast/api\";\nimport { Preferences } from \"./types\";\n\nconst shortCircuitMenuBar = <T>(state: T[] | undefined, prefs: Preferences): boolean => {\n  return (\n    (state == undefined || state.length == 0 || state.length == undefined) &&\n    ![\"always\", \"onlyWhenNotRunning\"].includes(prefs.showMenuBarIconWhen)\n  );\n};\n\nconst showHudOrToast = (args: { msg: string; launchedFromMenuBar: boolean; isErr: boolean }) => {\n  const prefs: Preferences = getPreferenceValues();\n  if (args.launchedFromMenuBar || prefs.closeWindowOnTimerStart) {\n    const msgEmoji = args.isErr ? \"\u26A0\uFE0F\" : \"\uD83C\uDF89\";\n    showHUD(`${msgEmoji} ${args.msg}`);\n    return popToRoot();\n  } else {\n    showToast({ style: args.isErr ? Toast.Style.Failure : Toast.Style.Success, title: args.msg });\n  }\n};\n\nexport { shortCircuitMenuBar, showHudOrToast };\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAuE,wBCAvE,IAAAC,EAAiD,wBAGjD,IAAAC,EAAiF,cACjFC,EAAwB,gBCkBxB,IAAMC,EAAuBC,IAC3BA,EAAK,GAAKA,EAAK,IAAM,OAAS,OAAYA,EAAK,GAC/CA,EAAK,GAAKA,EAAK,IAAM,OAAS,OAAYA,EAAK,GAE7C,KAAK,OACFA,EAAK,GAAK,IAAI,KAAKA,EAAK,EAAE,EAAI,IAAI,MAAQ,QAAQ,GAAKA,EAAK,GAAK,IAAI,KAAKA,EAAK,EAAE,EAAI,IAAI,MAAQ,QAAQ,CAC5G,EAAI,KC5BR,IAAAC,EAA0E,wBFS1E,IAAMC,EAAW,cAAY,YAAc,qBACrCC,EAA+B,cAAY,YAAc,8BAEzDC,EAAsBC,GAAe,CACzC,GAAI,IACF,cAAWA,CAAE,CACf,OAASC,EAAK,CAEZ,GAAIA,aAAe,OAAS,CAACA,EAAI,QAAQ,SAAS,QAAQ,EAAG,MAAMA,CACrE,CACF,EA2DA,SAASC,EAAUC,EAAmB,CACpC,IAAMC,EAAgB,cAAY,YAAc,IAAMD,EAChDE,EAAcD,EAAc,QAAQ,SAAU,UAAU,EAC9DE,EAAmBF,CAAa,EAChCE,EAAmBD,CAAW,CAChC,CAEA,SAASE,GAAY,CACnB,IAAMC,EAAuB,CAAC,EAE9B,SADc,eAAY,cAAY,WAAW,EAC3C,QAASL,GAAsB,CACnC,MAAI,WAAQA,CAAS,GAAK,SAAU,CAClC,IAAMM,EAAe,CACnB,KAAM,GACN,WAAY,IACZ,SAAU,IACV,aAAcN,EACd,SAAU,IAAI,IAChB,EACAM,EAAM,QAAO,gBAAa,cAAY,YAAc,IAAMN,CAAS,EAAE,SAAS,EAC9E,IAAMO,EAAiBP,EAAU,MAAM,KAAK,EAC5CM,EAAM,WAAa,OAAOC,EAAe,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC,EACzD,IAAMC,EAAcD,EAAe,CAAC,EAAE,QAAQ,MAAO,GAAG,EACxDD,EAAM,SAAW,KAAK,IAAI,EAAG,KAAK,MAAMA,EAAM,WAAaG,EAAoB,CAAE,GAAID,CAAY,CAAC,CAAC,CAAC,EACpGF,EAAM,SAAW,IAAI,KAAKE,CAAW,EACrCF,EAAM,SAAS,WAAWA,EAAM,SAAS,WAAW,EAAIA,EAAM,UAAU,EACxED,EAAY,KAAKC,CAAK,CACxB,CACF,CAAC,EACDD,EAAY,KAAK,CAACK,EAAGC,IACZD,EAAE,SAAWC,EAAE,QACvB,EACMN,CACT,CD3GA,IAAOO,EAAQ,SAAY,CACzB,GAAI,IAAC,uBAAoB,EAAE,iBACzB,OAAO,QAAM,aAAU,CACrB,MAAO,QAAM,MAAM,QACnB,MAAO,wCACT,CAAC,EAEH,IAAMC,EAAiBC,EAAU,EAAE,OAAQ,GAAa,EAAE,WAAa,CAAC,EACxE,GAAID,EAAe,SAAW,EAC5B,OAAO,QAAM,aAAU,CACrB,MAAO,QAAM,MAAM,QACnB,MAAO,2BACT,CAAC,EAEH,QAAM,mBAAgB,EACtBE,EAAUF,EAAe,CAAC,EAAE,YAAY,CAC1C",
  "names": ["dismissTimerAlert_exports", "__export", "dismissTimerAlert_default", "__toCommonJS", "import_api", "import_api", "import_fs", "import_path", "secondsBetweenDates", "args", "import_api", "DATAPATH", "DEFAULT_PRESET_VISIBLES_FILE", "silentFileDeletion", "fp", "err", "stopTimer", "timerFile", "timerFilePath", "dismissFile", "silentFileDeletion", "getTimers", "setOfTimers", "timer", "timerFileParts", "timeStarted", "secondsBetweenDates", "a", "b", "dismissTimerAlert_default", "finishedTimers", "getTimers", "stopTimer"]
}
