{
  "version": 3,
  "sources": ["../src/start90MinuteTimer.ts", "../src/backend/timerBackend.ts", "../src/backend/formatUtils.ts", "../src/backend/utils.ts"],
  "sourcesContent": ["import { closeMainWindow } from \"@raycast/api\";\nimport { checkForOverlyLoudAlert, startTimer } from \"./backend/timerBackend\";\n\nexport default async () => {\n  if (!checkForOverlyLoudAlert()) return;\n  await closeMainWindow();\n  startTimer({ timeInSeconds: 60 * 90, timerName: \"90 Minute Timer\" });\n};\n", "import { environment, getPreferenceValues } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, unlinkSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, Timer, TimerLaunchConfig } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\nimport { showHudOrToast } from \"./utils\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\nconst DEFAULT_PRESET_VISIBLES_FILE = environment.supportPath + \"/defaultPresetVisibles.json\";\n\nconst silentFileDeletion = (fp: string) => {\n  try {\n    unlinkSync(fp);\n  } catch (err) {\n    // only throw if it's not a \"file doesn't exist\" error\n    if (err instanceof Error && !err.message.includes(\"ENOENT\")) throw err;\n  }\n};\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    showHudOrToast({ msg: errorMsg, launchedFromMenuBar: launchedFromMenuBar, isErr: true });\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer({\n  timeInSeconds,\n  timerName = \"Untitled\",\n  launchedFromMenuBar = false,\n  selectedSound = \"default\",\n}: TimerLaunchConfig) {\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n  writeFileSync(masterName, timerName);\n\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`,\n  );\n  const afplayString = `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  if (prefs.selectedSound === \"speak_timer_name\") {\n    cmdParts.push(`say \"${timerName}\"`);\n  } else {\n    cmdParts.push(afplayString);\n  }\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${afplayString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  exec(cmdParts.join(\" && \"), (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n  showHudOrToast({\n    msg: `Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}!`,\n    launchedFromMenuBar: launchedFromMenuBar,\n    isErr: false,\n  });\n}\n\nfunction stopTimer(timerFile: string) {\n  const timerFilePath = environment.supportPath + \"/\" + timerFile;\n  const dismissFile = timerFilePath.replace(\".timer\", \".dismiss\");\n  silentFileDeletion(timerFilePath);\n  silentFileDeletion(dismissFile);\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n      };\n      timer.name = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeLeft = Math.max(0, Math.round(timer.secondsSet - secondsBetweenDates({ d2: timeStarted })));\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet);\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const dataPath = environment.supportPath + \"/\" + timerFile;\n  writeFileSync(dataPath, newName);\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  const res: Record<string, CustomTimer> = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  return Object.fromEntries(\n    Object.entries(res).map(([ctID, timer]) =>\n      timer.showInMenuBar === undefined ? [ctID, { ...timer, showInMenuBar: true }] : [ctID, timer],\n    ),\n  );\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction toggleCustomTimerMenubarVisibility(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  const currentVisibility = customTimers[ctID].showInMenuBar;\n  customTimers[ctID].showInMenuBar = currentVisibility === undefined ? false : !currentVisibility;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nconst readDefaultPresetVisibles = (): Record<string, boolean> => {\n  if (!existsSync(DEFAULT_PRESET_VISIBLES_FILE)) {\n    const defaultPresetVisibles = {\n      \"2M\": true,\n      \"5M\": true,\n      \"10M\": true,\n      \"15M\": true,\n      \"30M\": true,\n      \"45M\": true,\n      \"60M\": true,\n      \"90M\": true,\n    };\n    writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(defaultPresetVisibles));\n    return defaultPresetVisibles;\n  }\n  const res: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  return res;\n};\n\nconst toggleDefaultPresetVisibility = (key: string) => {\n  const data: Record<string, boolean> = JSON.parse(readFileSync(DEFAULT_PRESET_VISIBLES_FILE, \"utf8\"));\n  data[key] = !data[key];\n  writeFileSync(DEFAULT_PRESET_VISIBLES_FILE, JSON.stringify(data));\n};\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  toggleCustomTimerMenubarVisibility,\n  startTimer,\n  stopTimer,\n  readDefaultPresetVisibles,\n  toggleDefaultPresetVisibility,\n};\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours === 0 ? \"\" : hours + \":\"}${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    parsedDate.getMonth().toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\"),\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime(),\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n", "import { Toast, getPreferenceValues, popToRoot, showHUD, showToast } from \"@raycast/api\";\nimport { Preferences } from \"./types\";\n\nconst shortCircuitMenuBar = <T>(state: T[] | undefined, prefs: Preferences): boolean => {\n  return (\n    (state == undefined || state.length == 0 || state.length == undefined) &&\n    ![\"always\", \"onlyWhenNotRunning\"].includes(prefs.showMenuBarIconWhen)\n  );\n};\n\nconst showHudOrToast = (args: { msg: string; launchedFromMenuBar: boolean; isErr: boolean }) => {\n  const prefs: Preferences = getPreferenceValues();\n  if (args.launchedFromMenuBar || prefs.closeWindowOnTimerStart) {\n    const msgEmoji = args.isErr ? \"\u26A0\uFE0F\" : \"\uD83C\uDF89\";\n    showHUD(`${msgEmoji} ${args.msg}`);\n    return popToRoot();\n  } else {\n    showToast({ style: args.isErr ? Toast.Style.Failure : Toast.Style.Success, title: args.msg });\n  }\n};\n\nexport { shortCircuitMenuBar, showHudOrToast };\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAgC,wBCAhC,IAAAC,EAAiD,wBACjDC,EAAqB,yBAErB,IAAAC,EAAiF,cCHjF,IAAMC,EAAcC,GAAoB,CACtC,IAAMC,EAAQ,KAAK,MAAMD,EAAU,IAAI,EACjCE,EAAO,OAAO,KAAK,MAAOF,EAAU,KAAQ,EAAE,CAAC,EAAE,SAAS,EAAG,GAAG,EAChEG,EAAO,OAAO,KAAK,MAAMH,EAAU,EAAE,CAAC,EAAE,SAAS,EAAG,GAAG,EAC7D,MAAO,GAAGC,IAAU,EAAI,GAAKA,EAAQ,GAAG,GAAGC,CAAI,IAAIC,CAAI,EACzD,ECLA,IAAAC,EAA0E,wBAU1E,IAAMC,EAAkBC,GAAwE,CAC9F,IAAMC,KAAqB,uBAAoB,EAC/C,GAAID,EAAK,qBAAuBC,EAAM,wBAAyB,CAC7D,IAAMC,EAAWF,EAAK,MAAQ,eAAO,YACrC,oBAAQ,GAAGE,CAAQ,IAAIF,EAAK,GAAG,EAAE,KAC1B,aAAU,CACnB,QACE,aAAU,CAAE,MAAOA,EAAK,MAAQ,QAAM,MAAM,QAAU,QAAM,MAAM,QAAS,MAAOA,EAAK,GAAI,CAAC,CAEhG,EFVA,IAAMG,EAAW,cAAY,YAAc,qBACrCC,EAA+B,cAAY,YAAc,8BAW/D,IAAMC,EAA0B,CAACC,EAAsB,KAAU,CAC/D,IAAMC,KAAQ,uBAAiC,EAC/C,OAAI,WAAWA,EAAM,aAAa,EAAI,GAEpCC,EAAe,CAAE,IADA,0EACe,oBAAqBF,EAAqB,MAAO,EAAK,CAAC,EAChF,IAEF,EACT,EAEA,eAAeG,EAAW,CACxB,cAAAC,EACA,UAAAC,EAAY,WACZ,oBAAAL,EAAsB,GACtB,cAAAM,EAAgB,SAClB,EAAsB,CAEpB,IAAMC,GADW,cAAY,YAAc,IAAM,IAAI,KAAK,EAAE,YAAY,EAAI,MAAQH,EAAgB,UACxE,QAAQ,KAAM,IAAI,KAC9C,iBAAcG,EAAYF,CAAS,EAEnC,IAAMJ,KAAQ,uBAAiC,EACzCO,EAAoB,GACxB,cAAY,WAAa,KAAOF,IAAkB,UAAYL,EAAM,cAAgBK,EACtF,GACMG,EAAW,CAAC,SAASL,CAAa,EAAE,EAC1CK,EAAS,KACP,YAAYF,CAAU,0DAA0DF,CAAS,mCAC3F,EACA,IAAMK,EAAe,WAAWF,CAAiB,cAAcP,EAAM,cAAc,QAAQ,IAAK,GAAG,CAAC,GAMpG,GALIA,EAAM,gBAAkB,mBAC1BQ,EAAS,KAAK,QAAQJ,CAAS,GAAG,EAElCI,EAAS,KAAKC,CAAY,EAExBT,EAAM,iBAAkB,CAC1B,IAAMU,EAAc,GAAGJ,CAAU,GAAG,QAAQ,SAAU,UAAU,KAChE,iBAAcI,EAAa,0BAA0B,EACrDF,EAAS,KAAK,eAAeE,CAAW,WAAWD,CAAY,QAAQ,CACzE,CACAD,EAAS,KAAK,OAAOF,CAAU,kCAAkC,KACjE,QAAKE,EAAS,KAAK,MAAM,EAAG,CAACG,EAAOC,IAAW,CAC7C,GAAID,EAAO,CACT,QAAQ,IAAI,UAAUA,EAAM,OAAO,EAAE,EACrC,MACF,CACA,GAAIC,EAAQ,CACV,QAAQ,IAAI,WAAWA,CAAM,EAAE,EAC/B,MACF,CACF,CAAC,EACDX,EAAe,CACb,IAAK,UAAUG,CAAS,iBAAiBS,EAAWV,CAAa,CAAC,IAClE,oBAAqBJ,EACrB,MAAO,EACT,CAAC,CACH,CDzEA,IAAOe,EAAQ,SAAY,CACpBC,EAAwB,IAC7B,QAAM,mBAAgB,EACtBC,EAAW,CAAE,cAAe,GAAK,GAAI,UAAW,iBAAkB,CAAC,EACrE",
  "names": ["start90MinuteTimer_exports", "__export", "start90MinuteTimer_default", "__toCommonJS", "import_api", "import_api", "import_child_process", "import_fs", "formatTime", "seconds", "hours", "mins", "secs", "import_api", "showHudOrToast", "args", "prefs", "msgEmoji", "DATAPATH", "DEFAULT_PRESET_VISIBLES_FILE", "checkForOverlyLoudAlert", "launchedFromMenuBar", "prefs", "showHudOrToast", "startTimer", "timeInSeconds", "timerName", "selectedSound", "masterName", "selectedSoundPath", "cmdParts", "afplayString", "dismissFile", "error", "stderr", "formatTime", "start90MinuteTimer_default", "checkForOverlyLoudAlert", "startTimer"]
}
